# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - qa

pool:
  vmImage: "windows-latest"

variables:
  #  solution: '**/*.sln'
  buildPlatform: "Any CPU"
  buildConfiguration: "QA"

steps:
  - task: DotNetCoreCLI@2
    displayName: Restore
    inputs:
      command: restore
      projects: "src/DonateTo.WebApi/*.csproj"

  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      projects: "src/DonateTo.WebApi/*.csproj"
      arguments: "--configuration $(BuildConfiguration)"

  - task: PowerShell@2
    inputs:
      targetType: "inline"
      script: |
        dotnet tool install -g dotnet-ef --version 3.0.0
        dotnet ef migrations script  --project "$(Build.SourcesDirectory)\src\DonateTo.WebApi\DonateTo.WebApi.csproj" -s "$(Build.SourcesDirectory)\src\DonateTo.WebApi\DonateTo.WebApi.csproj" --output "$(build.artifactstagingdirectory)\SQL\migrations.sql" --idempotent --verbose --no-build --configuration $(BuildConfiguration) --context "DonateToDbContext"

  - task: DotNetCoreCLI@2
    displayName: Test
    inputs:
      command: test
      projects: "$(Parameters.TestProjects)"
      arguments: "--configuration $(BuildConfiguration)"

  - task: DotNetCoreCLI@2
    displayName: Publish
    inputs:
      command: publish
      publishWebProjects: false
      projects: "src/DonateTo.WebApi/*.csproj"
      arguments: "--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)"
      zipAfterPublish: True

  - task: PublishBuildArtifacts@1
    displayName: "Publish Artifact"
    inputs:
      PathtoPublish: "$(build.artifactstagingdirectory)"
      ArtifactName: webapidrop
    condition: succeededOrFailed()
